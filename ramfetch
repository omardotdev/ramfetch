#!/usr/bin/env bash
# MIT License
#
# Copyright (c) 2025 Omar
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

if [ -f /etc/ramfetch/ramfetchrc ]; then
    . /etc/ramfetch/ramfetchrc
else
    printf "[ramfetch] config file not found.. using default variables anyways.\n"
    BLK='\033[0;30m'
    RED='\033[0;31m'
    GRN='\033[1;32m'
    YEL='\033[1;33m'
    BLU='\033[0;34m'
    PURP='\033[0;35m'
    CYN='\033[0;36m'
    WHT='\033[0;37m'
fi

if [ "${disable_colors-unset}" != "unset" ] && [ "$disable_colors" = "1" ]; then
    unset BLK
    unset RED
    unset GRN
    unset YEL
    unset BLU
    unset PURP
    unset CYN
    unset WHT
fi

if [ ! -f /proc/meminfo ]; then
    echo "/proc/meminfo was not found.. exiting"
    exit 1
fi

# green arrow
GRN_ARROW="$(printf "%b->%b" "${GRN}" "${WHT}")"
# hostname/hostname length
HOSTNAME=$(uname -n)
HOST_AND_USER_LEN=$(( ${#HOSTNAME} + ${#USER} + 1 ))
HOST_AND_USER="$(printf "%b%s%b%c%b%s%b" "${GRN}" "$USER" "${WHT}" "@" "${YEL}" "$HOSTNAME" "${WHT}")"
# colorblocks
COLORBLOCKS="$(printf "%b%s%b%s%b%s%b%s%b%s%b%s%b%s%b%s%b" "${BLK}" "███" "${RED}" "███" "${GRN}" "███" "${BLU}" "███" "${YEL}" "███" "${PURP}" "███" "${CYN}" "███" "${WHT}" "███" "${WHT}")"
# yellow part
YELLOW_PART="$(printf "%b" "${YEL}")"
# green part
GREEN_PART="$(printf "%b" "${GRN}")"
# end
END="$(printf "%b" "${WHT}")"
# blue arrow
BLUE_ARROW="$(printf "%b->%b" "${BLU}" "${WHT}")"
# sets version
RAMFETCH_VER="v1.2.3"

# help and version
if [ "$*" = "--help" ] || [ "$*" = "-h" ]; then
    cat <<EOF
Usage: ramfetch [-h|-V]

Usage:
    --help (or -h for short) -- shows this help
    --version (or -v for short) -- shows version
EOF
exit 0
fi

if [ "$*" = "--version" ] || [ "$*" = "-v" ]; then
    cat <<EOF
$BLUE_ARROW ramfetch version $RAMFETCH_VER. made by Omar
https://github.com/omardotdev/
EOF
exit 0
fi

# Fetches memory information from /proc/meminfo
human_readable_size() {
    local bytes prefix frac whole
    bytes=$(($1 * 1000))
    case $bytes in
        ????????????????*) frac="???????????????" prefix=P ;;
        ?????????????*) frac="????????????" prefix=T ;;
        ??????????*) frac="?????????" prefix=G ;;
        ???????*) frac="??????" prefix=M ;;
        ????*) frac="???" prefix=k ;;
    esac

    whole=${bytes%$frac}
    frac=${bytes#"$whole"}
    LC_NUMERIC=C printf -v size '%9.2f %sB' "$whole.$frac" "$prefix"
}

while read -r name value prefix; do
    human_readable_size "$value"
    case ${name%:} in
        MemTotal) MEM_TOTAL=$size ;;
        MemFree) MEM_FREE=$size ;;
        MemAvailable) MEM_AVAILABLE=$size ;;
        Buffers) BUFFERS=$size ;;
        Cached) CACHED=$size ;;
        SwapTotal) SWAP_TOTAL=$size ;;
        SwapFree) SWAP_FREE=$size ;;
        Zswap) ZSWAP=$size ;;
        Zswapped) ZSWAPPED=$size ;;
        SwapCached) SWAP_CACHED=$size ;;
        Dirty) DIRTY=$size ;;
        KernelStack) KERNEL_STACK=$size ;;
        Percpu) PER_CPU=$size ;;
        WritebackTmp) WRITE_BACK_TMP=$size ;;
        VmallocTotal) VMALLOC_TOTAL=$size ;;
        VmallocUsed) VMALLOC_USED=$size ;;
        Mapped) MAPPED=$size ;;
        Active) ACTIVE=$size ;;
        Inactive) INACTIVE=$size ;;
    esac
done < /proc/meminfo

# output
cat <<EOF

$GREEN_PART   ████████████████████████████     $HOST_AND_USER
$GREEN_PART ████████████████████████████████$END   $(printf '%0.s-' $(seq 1 "$HOST_AND_USER_LEN"))
$GREEN_PART ████      ████      ███      ███$END   RAM Total $GRN_ARROW  $(printf "\t") ${MEM_TOTAL:-null}
$GREEN_PART ████      ████      ███      ███$END   RAM Free $GRN_ARROW $(printf "\t") ${MEM_FREE:-null}
$GREEN_PART ████      ████      ███      ███$END   RAM Available $GRN_ARROW $(printf "\t") ${MEM_AVAILABLE:-null}
$GREEN_PART ████      ████      ███      ███$END   Buffers $GRN_ARROW $(printf "\t\t") ${BUFFERS:-null}
$GREEN_PART ████████████████████████████████$END   Cached $GRN_ARROW $(printf "\t\t") ${CACHED:-null}
$GREEN_PART ██████████████████   ███████████$END   Swap Total $GRN_ARROW  $(printf "\t") ${SWAP_TOTAL:-null}
$YELLOW_PART ██████████████████   ███████████$END   Swap Free $GRN_ARROW  $(printf "\t") ${SWAP_FREE:-null}
                                    Zswap $GRN_ARROW $(printf "\t\t") ${ZSWAP:-null}
                                    Zswapped $GRN_ARROW $(printf "\t") ${ZSWAPPED:-null}
                                    Swap Cached $GRN_ARROW $(printf "\t") ${SWAP_CACHED:-null}
                                    Dirty $GRN_ARROW $(printf "\t\t") ${DIRTY:-null}
                                    Kernel Stack $GRN_ARROW $(printf "\t") ${KERNEL_STACK:-null}
                                    Per CPU $GRN_ARROW $(printf "\t\t") ${PER_CPU:-null}
                                    Writeback Tmp $GRN_ARROW $(printf "\t") ${WRITE_BACK_TMP:-null}
                                    Vmalloc Total $GRN_ARROW $(printf "\t") ${VMALLOC_TOTAL:-null}
                                    Vmalloc Used $GRN_ARROW $(printf "\t") ${VMALLOC_USED:-null}
                                    Mapped $GRN_ARROW $(printf "\t\t") ${MAPPED:-null}
                                    Active $GRN_ARROW $(printf "\t\t") ${ACTIVE:-null}
                                    Inactive $GRN_ARROW $(printf "\t") ${INACTIVE:-null}

                                    $COLORBLOCKS
EOF
